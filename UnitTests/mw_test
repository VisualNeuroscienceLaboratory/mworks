#!/usr/bin/python

from cStringIO import StringIO
from optparse import OptionParser
import os
from subprocess import call, check_call
import sys
from tempfile import NamedTemporaryFile
from xml.dom import minidom


tests_dir = '/Library/Application Support/MWorks/Developer/tests'
test_xml_dir = os.path.join(tests_dir, 'XML')

arch = '/usr/bin/arch'
valid_arch_names = ('x86_64', 'i386')
mworks_core_test_runner = os.path.join(tests_dir, 'MWorksCoreTestRunner')
marionette_test = os.path.join(tests_dir, ('MarionetteTest.app/Contents/'
                                           'MacOS/MarionetteTest'))
test_data_suffix = 'TESTDATA.xml'


def error(status, msg, *args):
    sys.stderr.write('ERROR: ' + (msg % args) + '\n')
    sys.exit(status)


def run_unit_tests(arch_name, test_names=None):
    with NamedTemporaryFile() as output:
        args = [arch, '-arch', arch_name, mworks_core_test_runner, output.name]
        if test_names:
            args.extend(test_names)

        status = call(args)
        if status not in (0, 1):
            error(cmd.returncode, '%s quit unexpectedly',
                  os.path.basename(mworks_core_test_runner))

        results = minidom.parse(output)

    failed_tests = results.getElementsByTagName('FailedTests')[0]
    return [test.firstChild.data for test in
            failed_tests.getElementsByTagName('Name')]


def iter_marionette_tests():
    for root, dirs, files in os.walk(test_xml_dir):
        for test_xml in (os.path.join(root, f) for f in files
                         if f.endswith('.xml') and
                         (not f.endswith(test_data_suffix))):
            yield test_xml


def run_marionette_tests(arch_name, test_names=None):
    if not test_names:
        test_xml_iter = iter_marionette_tests()
    else:
        test_xml_iter = ((test if os.path.isfile(test)
                          else os.path.join(test_xml_dir, test))
                         for test in test_names)

    failed_tests = []

    for test_xml in test_xml_iter:
        if not os.path.isfile(test_xml):
            error(3, 'no such file: "%s"', test_xml)

        args = [arch, '-arch', arch_name, marionette_test, test_xml]

        for test_data in (test_xml[:-4] + '.' + test_data_suffix,
                          os.path.join(os.path.dirname(test_xml),
                                       test_data_suffix)):
            if os.path.isfile(test_data):
                args.append(test_data)
                break

        if test_xml.startswith(test_xml_dir):
            test_name = test_xml[len(test_xml_dir)+1:]
        else:
            test_name = test_xml

        # Ensure that the display is awake by simulating a CTRL key
        # press with AppleScript
        check_call(['/usr/bin/osascript', '-e',
                    'tell application "System Events" to key code 59'])

        print test_name,
        sys.stdout.flush()
        status = call(args)
        print ':',
        if status == 0:
            print 'OK'
        else:
            print 'error'
            failed_tests.append(test_name)

    return failed_tests


def run_tests(arch_name, unit_test_names, marionette_test_names):
    failed_tests = []

    if unit_test_names:
        failed_tests.extend(run_unit_tests(arch_name, unit_test_names))
    elif not marionette_test_names:
        failed_tests.extend(run_unit_tests(arch_name))

    if marionette_test_names:
        failed_tests.extend(run_marionette_tests(arch_name,
                                                 marionette_test_names))
    elif not unit_test_names:
        failed_tests.extend(run_marionette_tests(arch_name))

    print
    if not failed_tests:
        print 'ALL TESTS PASS'
    else:
        print 'FAILURES:\n'
        for test_name in failed_tests:
            print '    %s' % test_name
    print

    return failed_tests


def main():
    op = OptionParser(usage='Usage: %prog [options] [test_name ...]')
    op.add_option('--arch',
                  type = 'choice',
                  choices = valid_arch_names,
                  default = valid_arch_names[0],
                  help = 'use specified CPU architecture')

    (opts, args) = op.parse_args()

    unit_test_names = []
    marionette_test_names = []

    for name in args:
        if name.endswith('.xml'):
            marionette_test_names.append(name)
        else:
            unit_test_names.append(name)

    failed_tests = run_tests(opts.arch, unit_test_names, marionette_test_names)

    sys.exit(bool(failed_tests))


if __name__ == '__main__':
    main()
