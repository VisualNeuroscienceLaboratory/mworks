# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.scheduler import Nightly, Triggerable
from buildbot.status import html
from buildbot.steps import shell, source, transfer
from buildbot.steps.trigger import Trigger

import local_config as config



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

c['projectName'] = 'MWorks'
c['projectURL'] = 'http://mworks-project.github.com/'
c['buildbotURL'] = 'http://%s:%d/' % (config.buildbot_hostname,
                                      config.webstatus_port)

c['status'] = [html.WebStatus(http_port=config.webstatus_port, allowForce=True)]

c['properties'] = {
    'MW_VERSION': 'NIGHTLY',
    }

installer_basename = 'MWorks'
installer_version = '%(MW_VERSION)s'
installer_filename = installer_basename + '-' + installer_version + '.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = (config.installer_destination_path + '/' +
                        installer_filename)

mw_app_support_dir = '/Library/Application Support/MWorks/'
mw_config_dir = mw_app_support_dir + 'Configuration/'
mw_developer_dir = mw_app_support_dir + 'Developer/'
mw_xcode_dir = mw_developer_dir + 'Xcode/'

mw_xcodebuild = mw_xcode_dir + 'mw_xcodebuild'
mw_default_xcode_target = 'Everything'
mw_default_xcode_configuration = 'Development'



################################################################################
#
# Build slaves
#
################################################################################



macosx_10_6_x86_64 = 'MacOSX-10.6-x86_64'

slave_names = [macosx_10_6_x86_64]
default_slavename = macosx_10_6_x86_64

c['slaves'] = [BuildSlave(name, config.slave_pass) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



def git_step(reponame, account='mworks-project', mode='update'):
    repourl = 'git://github.com/%s/%s.git' % (account, reponame)
    return source.Git(repourl=repourl, mode=mode)


def shell_step(*args, **kwargs):
    subdir = kwargs.pop('subdir', None)
    if subdir is not None:
        kwargs.setdefault('workdir', 'build/' + subdir)

    for key, val in (('description', 'building'), ('descriptionDone', 'build')):
        if subdir is not None:
            val = [val, subdir]
        kwargs.setdefault(key, val)

    return shell.ShellCommand(*args, **kwargs)


def xcodebuild_step(target = mw_default_xcode_target,
                    configuration = mw_default_xcode_configuration,
                    **kwargs):

    return shell_step(
        command = [
            mw_xcodebuild,
            target,
            configuration,
            WithProperties('%(MW_VERSION)s'),
            ],
        **kwargs
        )


def make_step(targets=[], **kwargs):
    return shell_step(
        command = [
            'make',
            'XCCONFIG_PATH=' + mw_xcode_dir.replace(' ', '\ ').rstrip('/'),
            'XCCONFIG_NAME=' + mw_default_xcode_configuration,
            WithProperties('MW_VERSION=%(MW_VERSION)s'),
            'MW_XCODEBUILD=' + mw_xcodebuild,
            ] + targets,
        **kwargs
        )


build_builder_steps = (

    ('clean_all', [
            shell_step(
                command = [
                    'rm', '-Rf',
                    '/Applications/MWClient.app',
                    '/Applications/MWEditor.app',
                    '/Applications/MWServer.app',
                    mw_app_support_dir,
                    '/Library/Frameworks/MWorksCocoa.framework',
                    '/Library/Frameworks/MWorksCore.framework',
                    ],
                description = 'cleaning',
                descriptionDone = 'clean',
                ),
            ]),

    ('install_xcode_configs', [
            git_step('mw_build'),
            shell_step(
                subdir = 'xcode_config',
                command = ['./install_xcconfigs.sh'],
                ),
            ]),

    ('build_mw_supporting', [
            git_step('mw_supporting'),
            shell_step(
                command = ['git', 'submodule', 'update', '--init'],
                description = ['updating', 'submodules'],
                descriptionDone = ['update', 'submodules'],
                ),
            shell_step(
                command = ['python', 'fresh_build.py', '--rebuild_all'],
                ),
            ]),

    ('build_mw_scarab', [
            git_step('mw_scarab'),
            xcodebuild_step(),
            ]),

    ('build_mw_core', [
            git_step('mw_core'),
            xcodebuild_step(),
            ]),

    ('build_mw_datatools', [
            git_step('mw_datatools'),
            xcodebuild_step(
                subdir = 'DataFileIndexer',
                ),
            xcodebuild_step(
                subdir = 'MWorksStreamUtilities',
                ),
            make_step(
                subdir = 'MatlabDataReader',
                targets = ['clean', 'install'],
                ),
            ]),

    ('build_mw_core_plugins', [
            git_step('mw_core_plugins'),
            xcodebuild_step(
                subdir = 'DriftingGratingStimulus',
                ),
            xcodebuild_step(
                subdir = 'HIDPlugin',
                ),
            xcodebuild_step(
                subdir = 'NE500',
                ),
            xcodebuild_step(
                subdir = 'SidewinderPlugAndPlayGamepadPlugin',
                ),
            ]),

    ('build_dicarlolab_mwcore_plugins', [
            git_step('dicarlolab_mwcore_plugins', account='dicarlolab-mworks'),
            xcodebuild_step(
                subdir = 'CircleStimulus',
                ),
            xcodebuild_step(
                subdir = 'FakeMonkeyPlugin',
                ),
             xcodebuild_step(
                subdir = 'ITC18Plugin',
                ),
             xcodebuild_step(
                subdir = 'MoviePlugin',
                ),
             xcodebuild_step(
                subdir = 'RectangleStimulus',
                ),
            ]),

    ('build_mw_cocoa', [
            git_step('mw_cocoa'),
            xcodebuild_step(),
            ]),

    ('build_mw_client', [
            git_step('mw_client'),
            xcodebuild_step(),
            ]),

    ('build_mw_client_plugins', [
            git_step('mw_client_plugins'),
            xcodebuild_step(
                subdir = 'BehavioralWindow',
                ),
            xcodebuild_step(
                subdir = 'PythonBridgePlugin',
                ),
            xcodebuild_step(
                subdir = 'VariablesWindow',
                ),
             ]),

    ('build_dicarlolab_mwclient_plugins', [
            git_step(
                reponame = 'dicarlolab_mwclient_plugins',
                account = 'dicarlolab-mworks',
                ),
            xcodebuild_step(
                subdir = 'CalibratorWindow',
                ),
            xcodebuild_step(
                subdir = 'EyeWindow',
                ),
            xcodebuild_step(
                subdir = 'MATLABWindow',
                ),
            xcodebuild_step(
                subdir = 'RewardWindow',
                ),
            ]),

    ('build_mw_editor', [
            git_step('mw_editor'),
            xcodebuild_step(),
            ]),

    ('build_mw_server', [
            git_step('mw_server'),
            xcodebuild_step(),
            ]),

    ('build_mw_examples', [
            git_step('mw_examples'),
            make_step(),
            ]),

    ('build_mw_xcode_templates', [
            git_step('mw_xcode_templates'),
            make_step(['test', 'install']),
            ]),

    ('build_installer', [
            git_step('mw_build'),
            shell_step(
                subdir = 'new_installer',
                command = [
                    './build_installer',
                    WithProperties(installer_version),
                    ],
                ),
            transfer.FileUpload(
                slavesrc = WithProperties(installer_slavesrc),
                masterdest = WithProperties(installer_masterdest),
                mode = 0644,
                ),
            ]),

    )


test_builder_steps = tuple(

    ('test_' + arch_name, [
            shell_step(
                command = [
                    'cp', '-f',
                    mw_config_dir + 'examples/setup_variables_macbook.xml',
                    mw_config_dir + 'setup_variables.xml',
                    ],
                description = ['creating', 'config', 'file'],
                descriptionDone = ['create', 'config', 'file'],
                ),
            shell_step(
                command = [mw_developer_dir + 'tests/test_mworks', arch_name],
                description = ['running', 'tests'],
                descriptionDone = ['run', 'tests'],
                )
            ])
    for arch_name in ('x86_64', 'i386')

    )


aggregate_builder_steps = tuple(

    (builder_name, [
            Trigger(
                schedulerNames = [component_info[0]],
                waitForFinish = True,
                updateSourceStamp = False,
                copy_properties = ['MW_VERSION'],
                )
            for component_info in builder_steps
            ])
    for builder_name, builder_steps in
    (
        ('build_all', build_builder_steps),
        ('test_all', test_builder_steps),
        ('build_and_test_all', (('build_all',), ('test_all',))),
        )

    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 


for builder_info in (build_builder_steps,
                     test_builder_steps,
                     aggregate_builder_steps):

    for builder_name, builder_steps in builder_info:
        c['builders'].append(BuilderConfig(
                name = builder_name,
                slavename = default_slavename,
                factory = factory.BuildFactory(builder_steps),
                ))

        c['schedulers'].append(Triggerable(
                name = builder_name,
                builderNames = [builder_name],
                ))


c['schedulers'].append(Nightly(
            name = 'nightly_build_and_test',
            builderNames = ['build_and_test_all'],
            branch = None,
            hour = 0,
            ))
