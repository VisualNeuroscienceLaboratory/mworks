#!/usr/bin/python

from optparse import OptionParser
import os
import pwd
from subprocess import check_call
import sys
import time


mw_files = (
    # Current
    '/Applications/MWClient.app',
    '/Applications/MWEditor.app',
    '/Applications/MWServer.app',
    '/Developer/Library/Xcode/Project Templates/MWorks',
    '/Library/Application Support/MWorks',
    '/Library/Frameworks/MWorksCocoa.framework',
    '/Library/Frameworks/MWorksCore.framework',

    # Legacy
    '/Documents/MWorks',
    '/Documents/MonkeyWorks',
    '/Library/Application Support/MWClient',
    '/Library/Application Support/MWEditor',
    '/Library/Application Support/MonkeyWorks',
    '/Library/Application Support/MonkeyWorksClient',
    '/Library/Application Support/MonkeyWorksEditor',
    '/Library/Application Support/NewClient',
    '/Library/Application Support/NewEditor',
    '/Library/Frameworks/MonkeyWorksCocoa.framework',
    '/Library/Frameworks/MonkeyWorksCore.framework',
    '/Library/Frameworks/Narrative.framework',
    '/Library/Frameworks/Scarab.framework',
    '/Library/MonkeyWorks',
    )


def backup_files(filelist, backupdir):
    if os.path.exists(backupdir):
        timestamp = time.ctime(os.stat(backupdir)[-1]).replace(':', '.')
        check_call(['mv',
                    backupdir,
                    '%s (%s)' % (backupdir, timestamp)])

    for filename in filelist:
        if os.path.exists(filename):
            destdir = os.path.join(backupdir, os.path.dirname(filename[1:]))
            sys.stdout.write('Moving "%s" to "%s"\n' % (filename, backupdir))
            check_call(['mkdir', '-p', destdir])
            check_call(['mv', filename, destdir])

    # Make sure the backup directory has the same owner as its parent
    if os.path.exists(backupdir):
        expected_uid = os.stat(os.path.dirname(backupdir))[4]
        if os.geteuid() != expected_uid:
            username = pwd.getpwuid(expected_uid)[0]
            check_call(['chown', '-R', username, backupdir])


def restore_files(filelist, backupdir):
    for filename in filelist:
        srcfile = os.path.join(backupdir, filename[1:])
        if os.path.exists(srcfile):
            sys.stdout.write('Restoring "%s" from "%s"\n' %
                             (filename, backupdir))
            check_call(['mv', srcfile, os.path.dirname(filename)])

    check_call(['rm', '-Rf', backupdir])


def get_backupdir(path):
    return os.path.expanduser(os.path.join('~/.Trash', path))


def main():
    parser = OptionParser()
    parser.add_option('-b', '--backup', action='store_true', dest='backup',
                      help="don't restore, but back up old installation")
    (options, args) = parser.parse_args()

    backupdir = get_backupdir('Old MWorks')

    if options.backup:
        backup_files(mw_files, backupdir)
    else:
        backup_files(mw_files, get_backupdir('Uninstalled MWorks'))
        restore_files(mw_files, backupdir)


if __name__ == '__main__':
    main()
